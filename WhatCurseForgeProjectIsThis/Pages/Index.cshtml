@page "{projectId:int?}"
@using System.Web
@using Microsoft.AspNetCore.Html
@using Microsoft.AspNetCore.Http.Extensions
@using Newtonsoft.Json
@model IndexModel
@{
    ViewData["Title"] = "What?";

    var permLink = string.Empty;
    var oembedLink = string.Empty;

    if (Model.FoundMod != null)
    {
        ViewData["Title"] = Model.FoundMod.Name;
        permLink = Url.PageLink($"/Index", values: new { projectId = Model.FoundMod.Id, fileId = Model.FileSearchField }, protocol: "https");
        oembedLink = Url.PageLink("/Index", values: new { projectId = "" }, protocol: "https") + $"api/oembed/{Model.FoundMod.Id}.oembed.json";
    }
}

@section Head {
    <meta name="twitter:card" content="summary">
    <meta property="og:type" content="website" />
    @if (Model.FoundMod != null)
    {
        var summaryText = new System.Text.StringBuilder();
var haveExtraLinebreak = false;
summaryText.AppendLine(Model.FoundMod.Summary);

if (!string.IsNullOrWhiteSpace(Model.FoundMod.Links?.IssuesUrl))
{
    summaryText.AppendLine();
    if(Model.IsDiscord)
    {
        summaryText.Append($"[Issues]({Model.FoundMod.Links.IssuesUrl}) ");
    }
    else
    {
        summaryText.AppendLine($"Issues: {Model.FoundMod.Links.IssuesUrl}");
        haveExtraLinebreak = true;
    }
}

if (!string.IsNullOrWhiteSpace(Model.FoundMod.Links?.WikiUrl))
{
    if(Model.IsDiscord)
    {
        summaryText.Append($"[Wiki/Docs]({Model.FoundMod.Links.WikiUrl}) ");
    }
    else
    {
        if (!haveExtraLinebreak)
        {
            summaryText.AppendLine();
            haveExtraLinebreak = true;
        }
        summaryText.AppendLine($"Wiki/Docs: {Model.FoundMod.Links.WikiUrl}");
    }
}

if (!string.IsNullOrWhiteSpace(Model.FoundMod.Links?.SourceUrl))
{
    if(Model.IsDiscord)
    {
        summaryText.Append($"[Source]({Model.FoundMod.Links.SourceUrl}) ");
    }
    else
    {
        if (!haveExtraLinebreak)
        {
            summaryText.AppendLine();
            haveExtraLinebreak = true;
        }
        summaryText.AppendLine($"Source: {Model.FoundMod.Links.SourceUrl}");
    }
}

if (Model.FoundMod.LatestFilesIndexes?.Count > 0)
{
    var gameVersionList = new List<string>();
    var modloaderList = new List<string>();

    foreach (var file in Model.FoundMod.LatestFilesIndexes)
    {
        var modFile = Model.FoundMod.LatestFiles.FirstOrDefault(f => f.Id == file.FileId);
        if (modFile?.IsAvailable ?? true)
        {
            if(!string.IsNullOrWhiteSpace(file.GameVersion))
            {
                gameVersionList.Add(file.GameVersion);
            }
            if(!string.IsNullOrWhiteSpace(file.ModLoader?.ToString()))
            {
                modloaderList.Add(file.ModLoader?.ToString());
            }
        }
    }
    var gameVersions = string.Join(", ", gameVersionList.Distinct());
    var modLoaders = string.Join(", ", modloaderList.Distinct());

    if ((!string.IsNullOrWhiteSpace(gameVersions) || !string.IsNullOrWhiteSpace(modLoaders)) && !haveExtraLinebreak)
    {
        summaryText.AppendLine();
        haveExtraLinebreak = true;
    }

    if (!string.IsNullOrWhiteSpace(gameVersions))
    {
        summaryText.AppendLine($"Game version(s): {gameVersions}");
    }

    if (!string.IsNullOrWhiteSpace(modLoaders))
    {
        summaryText.AppendLine($"Modloader(s): {modLoaders}");
    }
}

        <meta property="og:title" content="@Model.FoundMod.Name" />
        <meta name="twitter:title" content="@Model.FoundMod.Name" />
        if (Model.FoundMod.Links != null && !string.IsNullOrWhiteSpace(Model.FoundMod.Links.WebsiteUrl))
        {
            <meta property="og:url" content="@Model.FoundMod.Links.WebsiteUrl" />
        }
        if (Model.FoundMod.Logo != null && !string.IsNullOrWhiteSpace(Model.FoundMod.Logo.ThumbnailUrl))
        {
            <meta property="og:image" content="@Model.FoundMod.Logo.ThumbnailUrl" />
            <meta property="og:image:alt" content="Project logotype" />
            <meta property="og:image:width" content="256" />
            <meta property="og:image:height" content="256" />
            <meta name="twitter:image" content="@Model.FoundMod.Logo.ThumbnailUrl" />
        }
        <meta name="description" content="@summaryText.ToString().Trim()" />
        <meta property="og:description" content="@summaryText.ToString().Trim()" />
        <meta name="twitter:description" content="@summaryText.ToString().Trim()" />
        <meta name="twitter:site" content="@@CurseForge">
        <link rel="alternate" type="application/json+oembed" href="@oembedLink" title="@Model.FoundMod.Name" />
    }
    else
    {
        <meta property="og:title" content="CFLookup / What CurseForge Project Is This?" />
        <meta property="og:type" content="website" />
        <meta property="og:url" content="https://cflookup.com/" />
        <meta name="description" content="CFLookup / What CurseForge Project Is This? is a tool to help you find the CurseForge project or file based on a ID." />
        <meta property="og:description" content="CFLookup / What CurseForge Project Is This? is a tool to help you find the CurseForge project or file based on a ID." />
        <meta name="twitter:description" content="CFLookup / What CurseForge Project Is This? is a tool to help you find the CurseForge project or file based on a ID." />
        <meta name="twitter:site" content="@@NoLifeKing85">
    }
}

    <div class="text-center">
        <h1 class="display-4">CFLookup / What CurseForge Project Is This?</h1>
        <form href="/" asp-page="Index" method="post">
            <label class="form-label" for="projectSearchField">Enter the project id, and we'll try to look it up for you!</label>
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="input-group mb-3">
                        <label class="input-group-text" for="projectSearchField">Project Id / Slug</label>
                        <input type="text" class="form-control text-center" id="projectSearchField" asp-for="ProjectSearchField" placeholder="Project Id / Slug (project-<number>)" />
                        <button type="submit" class="btn btn-secondary">Search project</button>
                    </div>
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="input-group mb-3">
                        <label class="input-group-text" for="fileSearchField">File Id</label>
                        <input type="number" class="form-control text-center" id="fileSearchField" asp-for="FileSearchField" placeholder="File Id" />
                        <button type="submit" class="btn btn-secondary">Search file</button>
                    </div>
                </div>
            </div>
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <p class="text-muted"><em>This tool is primarly focused on helping you find what mods that are deleted, and cannot be used in CurseForge.</em></p>
                </div>
            </div>
        </form>
        @if (Model.FoundMod == null && Model.FoundMods == null)
    {
        if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
        {
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="alert alert-danger" role="alert">
                        @Model.ErrorMessage
                    </div>
                </div>
            </div>
        }
    }
    else if(Model.FoundMod == null && Model.FoundMods != null)
    {
        <hr />
        <h2>Found multiple results for your query <kbd>@Model.ProjectSearchField</kbd></h2>
        var modsGroupedByGame = Model.FoundMods.GroupBy(k => k.Value.game).ToList();
        foreach(var game in modsGroupedByGame)
        {
            var gameInfo = game.Key;
            foreach(var modCollection in game)
            {
                var mods = modCollection.Value.mods;
                <div class="mb-3 row justify-content-start">
                    <div class="col-md-12 text-start">
                        <h3><img src="@gameInfo.Assets.IconUrl" alt="Game icon: @gameInfo.Name" /> @gameInfo.Name <span class="badge bg-secondary">@modCollection.Value.category.Name</span></h3>
                    </div>
                </div>
                foreach(var mod in mods)
                {
                    <div class="row justify-content-start text-start">
                        <div class="ps-5 col-md-12">
                            <h4>
                            @if (mod.Logo != null && !string.IsNullOrWhiteSpace(mod.Logo.ThumbnailUrl))
                            {
                                <img src="@mod.Logo.ThumbnailUrl" style="width: 32px;" alt="Project logotype" />
                            }
                            @if (mod.Links != null && !string.IsNullOrWhiteSpace(mod.Links.WebsiteUrl))
                            {
                                <a href="@mod.Links.WebsiteUrl" class="text-white" target="_blank">@mod.Name</a> <i class="bi bi-box-arrow-up-right"></i>
                            }
                            else
                            {
                                @mod.Name
                            }
                            <span class="badge bg-secondary ms-4">Project Id: <a class="text-white" href="@Url.PageLink($"/Index", values: new { projectId = mod.Id }, protocol: "https")">@mod.Id</a></span>
                            </h4>
                            <span class="text-muted">@mod.Summary</span>
                        </div>
                    </div>
                }
                <hr class="mb-5" />
            }
        }
    }
    else
    {
        <hr />
        @if (Model.FoundMod.Logo != null && !string.IsNullOrWhiteSpace(Model.FoundMod.Logo.ThumbnailUrl))
        {
            <img src="@Model.FoundMod.Logo.ThumbnailUrl" loading="lazy" alt="Project logotype" />
        }
        @if (Model.FoundMod.Links != null && !string.IsNullOrWhiteSpace(Model.FoundMod.Links.WebsiteUrl))
        {
            <h2><a href="@Model.FoundMod.Links.WebsiteUrl" class="text-white" target="_blank">@Model.FoundMod.Name</a> <i class="bi bi-box-arrow-up-right"></i></h2>
        }
        else
        {
            <h2>@Model.FoundMod.Name</h2>
        }
        <p><i>@Model.FoundMod.Summary</i></p>
        <div class="row justify-content-center">
            <div class="col-md-6">
                <table class="table table-striped table-dark text-start table-bordered caption-top">
                    <caption>Project information</caption>
                    <tbody>
                        <tr>
                            <td><b>Author</b></td>
                            <td class="text-end">@Html.Raw(string.Join("<br />", Model.FoundMod.Authors.Select(c => "<a href=\"" + c.Url + "\" class=\"text-white\" target=\"_blank\">" + HttpUtility.HtmlEncode(c.Name) + "</a>")))</td>
                        </tr>
                        <tr>
                            <td><b>Status</b></td>
                            <td class="text-end">@Model.FoundMod.Status.ToString()</td>
                        </tr>
                        <tr>
                            <td><b>Created</b></td>
                            <td class="text-end">@Model.FoundMod.DateCreated.ToString()</td>
                        </tr>
                        <tr>
                            <td><b>Modified</b></td>
                            <td class="text-end">@Model.FoundMod.DateModified.ToString()</td>
                        </tr>
                        <tr>
                            <td><b>Released</b></td>
                            <td class="text-end">@Model.FoundMod.DateReleased.ToString()</td>
                        </tr>
                        <tr>
                            <td><b>Downloads (might be inaccurate)</b></td>
                            <td class="text-end">@Model.FoundMod.DownloadCount.ToString("n0")</td>
                        </tr>
                        <tr>
                            <td><b>Categories</b></td>
                            <td class="text-end">@Html.Raw(string.Join("<br />", Model.FoundMod.Categories.Select(c => "<a href=\"" + c.Url + "\" class=\"text-white\" target=\"_blank\">" + HttpUtility.HtmlEncode(c.Name) + "</a>")))</td>
                        </tr>
                        <tr>
                            <td><b>Mod Distribution</b></td>
                            <td class="text-end">@(Model.FoundMod.AllowModDistribution ?? true ? "Allowed" : "Not allowed")</td>
                        </tr>
                    </tbody>
                </table>
                @if (Model.FoundMod.LatestFilesIndexes?.Count > 0)
                {
                    <table class="table table-striped table-dark text-start table-bordered caption-top">
                        <caption>Latest version information</caption>
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Release type</th>
                                @if (Model.FoundMod.GameId == 432)
                                {
                                    <th>Modloader</th>
                                }
                                <th>Game version</th>
                                <th>&nbsp;</th>
                                @if (Model.FoundMod.ClassId == 4471)
                                {
                                    <th>Validate</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var file in Model.FoundMod.LatestFilesIndexes)
                            {
                                var modFile = Model.FoundMod.LatestFiles.FirstOrDefault(f => f.Id == file.FileId);
                                if (modFile?.IsAvailable ?? false)
                                {
                                    <tr>
                                        <td>@file.Filename</td>
                                        <td>@file.ReleaseType</td>
                                        @if (Model.FoundMod.GameId == 432)
                                        {
                                            <td>@(file.ModLoader.HasValue ? new HtmlString(file.ModLoader.ToString()) : Html.Raw("<i>Unknown</i>"))</td>
                                        }
                                        <td>@file.GameVersion</td>
                                        <td><div class="cf-install-button" title="Install with CurseForge"><a href="curseforge://install?addonId=@Model.FoundMod.Id&fileId=@file.FileId" target="_blank">Install</a></div></td>
                                        @if (Model.FoundMod.ClassId == 4471)
                                        {
                                            <td><div class="cf-install-button" title="Validate modpack (Check if 3rd party can install it)"><a href="@Url.PageLink("ValidateManifest", values: new { projectId = Model.FoundMod.Id, fileId = file.FileId }, protocol: "https")">Validate</a></div></td>
                                        }
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                }
                @if (Model.FoundMod.Screenshots?.Count > 0)
                {
                    <div class="carousel slide" data-bs-ride="carousel" id="screenshots">
                        <div class="carousel-indicators">
                            @{
                                var firstScreenshot = true;
                                var screenIndex = 0;
                            }
                            @foreach (var screenshot in Model.FoundMod.Screenshots)
                            {
                                <button type="button" data-bs-target="#screenshots" data-bs-slide-to="@(screenIndex++)" class="@(firstScreenshot ? "active" : null)" aria-current="@(firstScreenshot ? "true" : null)"></button>
                                firstScreenshot = false;
                            }
                        </div>
                        <div class="carousel-inner">
                            @{
                                firstScreenshot = true;
                            }
                            @foreach (var screenshot in Model.FoundMod.Screenshots)
                            {
                                <div class="carousel-item @(firstScreenshot ? "active" : null)">
                                    <img src="@screenshot.Url" class="d-block w-100" alt="@screenshot.Title">
                                    <div class="carousel-caption d-none d-md-block">
                                        <h5>@screenshot.Title</h5>
                                        <p>@screenshot.Description</p>
                                    </div>
                                </div>
                                firstScreenshot = false;
                            }
                        </div>
                        <button class="carousel-control-prev" type="button" data-bs-target="#screenshots" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Previous</span>
                        </button>
                        <button class="carousel-control-next" type="button" data-bs-target="#screenshots" data-bs-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                        </button>
                    </div>
                }
                <p class="text-muted"><em>Permalink: <a href="@permLink" class="text-muted" target="_blank">@permLink</a></em></p>
            </div>
        </div>
    }
</div>
